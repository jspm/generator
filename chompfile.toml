version = 0.1

extensions = ['chomp@0.1:swc', 'chomp@0.1:rollup', 'chomp@0.1:prettier']

default-task = 'build'

[[task]]
target = 'lib'
deps = ['lib/**/*.js']

[[task]]
name = 'build'
target = 'dist'
deps = ['lib', 'npm:install', 'build:dec']
template = 'rollup'
[task.template-options]
input = [
    'lib/generator-deno.js',
    'lib/generator.js',
    'lib/common/fetch-vscode.js',
    'lib/common/fetch-deno.js',
    'lib/common/fetch-node.js',
    'lib/common/fetch-native.js'
]
onwarn = false
clear-dir = true
[task.template-options.output]
dir = 'dist'

[[task]]
name = 'build:ts'
target = 'lib/##.js'
deps = ['src/##.ts']
template = 'swc'
[task.template-options.config]
inlineSourcesContent = false
'jsc.target' = 'es2019'

# TODO: We should emit declaration files with swc once they support it.
#       See: https://github.com/swc-project/swc/issues/657
[[task]]
name = 'build:dec'
deps = ['src/**/*.ts']
run = 'tsc --emitDeclarationOnly'

[[task]]
target = 'lib/version.js'
dep = 'package.json'
engine = 'node'
run = '''
    import { readFileSync, writeFileSync } from 'fs';
    const { version } = JSON.parse(readFileSync('package.json', 'utf8'));
    writeFileSync('lib/version.js', `export default ${JSON.stringify(version)}`);
'''

[[task]]
name = 'build:ts'
target = 'lib/##.js'
deps = ['src/##.ts']
template = 'swc'
[task.template-options.config]
inlineSourcesContent = false
'jsc.target' = 'es2019'

[[task]]
name = 'test'
serial = true
deps = [
    'test:unit',
    'test:integration',
    'test:browser',
]

[[task]]
name = 'test:unit'
dep = 'unit:'

[[task]]
name = 'unit:#'
deps = ['lib/##.test.js', 'lib']
run = 'node -C source --enable-source-maps $DEP'

[[task]]
name = 'test:integration'
dep = 'integration:'


[[task]]
name = 'integration:#'
deps = ['test/##.test.js', 'lib']
run = 'node -C source --enable-source-maps $DEP'

[[task]]
name = 'test:browser'
deps = ['build:ts', 'dist/*', 'test/test.html']
run = 'node test/server.mjs'

[[task]]
name = 'test:browser:watch'
env = { WATCH_MODE = '1' }
run = 'node test/server.mjs'

[[task]]
name = 'cache-clear'
engine = 'node'
run = '''
    import { clearCache } from '@jspm/generator';
    clearCache();
'''

[[task]]
target = 'test/test.html'
deps = ['src/**/*.ts', 'dist/generator.js']
engine = 'node'
run = '''
    import { Generator } from '@jspm/generator';
    import { readFile, writeFile } from 'fs/promises';

    const generator = new Generator({
        mapUrl: new URL('./test/test.html', import.meta.url.replace('//[', '/[')),
        env: ['browser', 'module', 'production']
    });

    await generator.link('@jspm/generator');
    await generator.install('node:assert');

    const html = await generator.htmlInject(await readFile(process.env.TARGET, 'utf8'), {
        htmlUrl: new URL(process.env.TARGET, import.meta.url.replace('//[', '/['))
    });
    await writeFile(process.env.TARGET, html);
'''

[[task]]
name = 'prettier'
template = 'prettier'
deps = ['src/**/*.ts', 'test/**/*.js']
[task.template-options]
ignore-path = '.prettierignore'
files = 'src/**/*.ts test/**/*.js'
loglevel = 'warn'

[[task]]
name = 'typecheck'
deps = ['src/**/*.ts', 'src/*.ts']
run = '''
    tsc --noEmit
'''
