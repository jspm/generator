version = 0.1

extensions = ['chomp@0.1:swc', 'chomp@0.1:rollup']

default-task = 'test'

[[task]]
target = 'docs'
deps = ['src/**/*.ts']
run = 'typedoc src/generator.ts'

[[task]]
name = 'build'
target = 'dist'
deps = ['lib/**/*.js', 'npm:install']
template = 'rollup'
[task.template-options]
entries = [
    'lib/generator.js',
    'lib/common/fetch-vscode.js',
    'lib/common/fetch-deno.js',
    'lib/common/fetch-node.js',
    'lib/common/fetch-native.js'
]

[[task]]
target = 'lib/version.js'
dep = 'package.json'
engine = 'node'
run = '''
    import { readFileSync, writeFileSync } from 'fs';
    const { version } = JSON.parse(readFileSync('package.json', 'utf8'));
    writeFileSync('lib/version.js', `export default ${JSON.stringify(version)}`);
'''

[[task]]
target = 'lib/#.js'
deps = ['src/#.ts']
template = 'swc'
[task.template-options.config]
inlineSourcesContent = false
'jsc.target' = 'es2019'

[[task]]
name = 'test'
serial = true
deps = [
    'unit:',
    'test:browser',
]

[[task]]
name = 'unit:#'
serial = true
deps = ['test/#.test.js', 'lib/**/*.js', 'dist/*']
display = 'dot'
run = 'node -C source $DEP'

[[task]]
name = 'test:browser'
deps = ['lib/**/*.js', 'dist/*']
run = 'node test/server.mjs'

[[task]]
name = 'test:watch'
run = 'node test/server.mjs'

[[task]]
name = 'cache-clear'
engine = 'node'
run = '''
    import { clearCache } from '@jspm/generator';
    clearCache();
'''

[[task]]
name = 'self-generate'
engine = 'node'
run = '''
    import { Generator } from '@jspm/generator';
    import { readFile } from 'fs/promises';

    const noTs = !process.env.TS;

    const generator = new Generator({
    mapUrl: 'about:blank',
    inputMap: noTs ? {
        imports: {
        '@babel/core': 'https://ga.jspm.io/npm:@jspm/core@2.0.0-beta.10/nodelibs/@empty.js',
        '@babel/preset-typescript': 'https://ga.jspm.io/npm:@jspm/core@2.0.0-beta.10/nodelibs/@empty.js'
        }
    } : {}
    });

    const { version } = JSON.parse(await readFile(new URL('package.json', import.meta.url)));

    await generator.install(`@jspm/generator@${version}`);

    const json = generator.getMap();
    console.log(JSON.stringify(json, null, 2));
'''